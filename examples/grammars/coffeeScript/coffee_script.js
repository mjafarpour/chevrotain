const chevrotain = require("chevrotain")
const Lexer = require('coffeescript/lib/coffeescript/lexer').Lexer;
lexer = new Lexer;

const coffeeNameToTokenName = {}
const tokenVocabulary = {}
const allTokens = []
// a little utility to reduce duplication
const createToken = function createTokenWrapper(options) {
    options.pattern = chevrotain.Lexer.NA
    // usage of the official createToken API.
    let newTokenType = chevrotain.createToken(options)
    allTokens.push(newTokenType)
    tokenVocabulary[options.name] = newTokenType

    let coffeeName = options.coffeeName ? options.coffeeName : options.name
    coffeeNameToTokenName[coffeeName] = options.name
}

var tokens = lexer.tokenize(`
class True extends Token
  @PATTERN: -> /true/
`)

createToken({name: "TERMINATOR"})
createToken({name: "STATEMENT"})
createToken({name: "YIELD"})
createToken({name: "FROM "})
createToken({name: "INDENT "})
createToken({name: "OUTDENT"})
createToken({name: "IDENTIFIER"})
createToken({name: "PROPERTY"})
createToken({name: "NUMBER"})
createToken({name: "STRING"})
createToken({name: "STRING_START"})
createToken({name: "STRING_END"})
createToken({name: "REGEX"})
createToken({name: "REGEX_START"})
createToken({name: "REGEX_END"})
createToken({name: "UNDEFINED"})
createToken({name: "NULL"})
createToken({name: "BOOL"})
createToken({name: "INFINITY"})
createToken({name: "NAN"})
createToken({name: "RETURN"})
createToken({name: "AWAIT"})
createToken({name: "HERECOMMENT"})
createToken({name: "PARAM_START"})
createToken({name: "PARAM_END"})
createToken({name: "PARAM_END"})
createToken({name: "xxx", coffeeName: "->"})
createToken({coffeeName: "=>"})
createToken({coffeeName: ","})
createToken({name: "SUPER"})
createToken({name: "INDEX_START"})
createToken({name: "INDEX_END"})
createToken({name: "xxx", coffeeName: "."})
createToken({name: "xxx", coffeeName: "?."})
createToken({name: "xxx", coffeeName: "::"})
createToken({name: "xxx", coffeeName: "?:"})
createToken({name: "xxx", coffeeName: "::"})
createToken({name: "xxx", coffeeName: "..."})
createToken({name: "CLASS"})
createToken({name: "EXTENDS "})
createToken({name: "IMPORT "})
createToken({name: "xxx", coffeeName: "{"})
createToken({name: "xxx", coffeeName: "}"})
createToken({name: "DEFAULT"})
createToken({name: "AS"})
createToken({name: "IMPORT_ALL"})
createToken({name: "EXPORT"})
createToken({name: "xxx", coffeeName: "="})
createToken({name: "EXPORT_ALL"})
createToken({name: "FUNC_EXIST"})
createToken({name: "CALL_START"})
createToken({name: "CALL_END"})
createToken({name: "THIS"})
createToken({name: "xxx", coffeeName: "@"})
createToken({name: "xxx", coffeeName: "["})
createToken({name: "xxx", coffeeName: "]"})
createToken({name: "xxx", coffeeName: ".."})
createToken({name: "TRY"})
createToken({name: "Catch"})
createToken({name: "FINALLY"})
createToken({name: "THROW"})
createToken({name: "xxx", coffeeName: "("})
createToken({name: "xxx", coffeeName: ")"})
createToken({name: "WHILE"})
createToken({name: "UNTIL"})
createToken({name: "WHEN"})
createToken({name: "LOOP"})
createToken({name: "FOR"})
createToken({name: "BY"})
createToken({name: "OWN"})
createToken({name: "FORIN"})
createToken({name: "FOROF"})
createToken({name: "FORFROM"})
createToken({name: "SWITCH"})
createToken({name: "ELSE"})
createToken({name: "LEADING_WHEN"})
createToken({name: "IF"})
createToken({name: "POST_IF"})
createToken({name: "UNARY"})
createToken({name: "UNARY_MATH"})
createToken({name: "xxx", coffeeName: "-"})
createToken({name: "xxx", coffeeName: "+"})
createToken({name: "xxx", coffeeName: "--"})
createToken({name: "xxx", coffeeName: "++"})
createToken({name: "xxx", coffeeName: "?"})
createToken({name: "MATH"})
createToken({name: "xxx", coffeeName: "**"})
createToken({name: "SHIFT"})
createToken({name: "COMPARE"})
createToken({name: "xxx", coffeeName: "&"})
createToken({name: "xxx", coffeeName: "^"})
createToken({name: "xxx", coffeeName: "|"})
createToken({name: "xxx", coffeeName: "&&"})
createToken({name: "xxx", coffeeName: "||"})
createToken({name: "BIN"})
createToken({name: "RELATION"})
createToken({name: "COMPOUND_ASSIGN"})
var x = 5;
